<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NSHaoSong</title>
  
  
  <link href="https://haosong.name/atom.xml" rel="self"/>
  
  <link href="https://haosong.name/"/>
  <updated>2023-04-10T00:04:40.380Z</updated>
  <id>https://haosong.name/</id>
  
  <author>
    <name>NSHaoSong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Auto-generate a version name for a Swift PM project</title>
    <link href="https://haosong.name/2023/04/09/auto-generate-a-version-name-for-a-swift-pm-project/"/>
    <id>https://haosong.name/2023/04/09/auto-generate-a-version-name-for-a-swift-pm-project/</id>
    <published>2023-04-09T23:06:41.000Z</published>
    <updated>2023-04-10T00:04:40.380Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2023/03/26/generate-an-informative-version-name-using-git/">Previously</a>, we discussed how to use <code>git describe</code> to generate an informative version name of a project. How do we use it in a Swift Package Manager project to automate the version name generation? </p><span id="more"></span><h2 id="Problem-Multiple-sources-of-truth-for-version-info"><a href="#Problem-Multiple-sources-of-truth-for-version-info" class="headerlink" title="Problem: Multiple sources of truth for version info"></a>Problem: Multiple sources of truth for version info</h2><p>It‚Äôs a common practice to ship binaries of a program with the version info and provide a way to check the version through its interface.</p><p>Let‚Äôs say we are building a command line program in Swift using Swift Package Manager:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‚îú‚îÄ‚îÄ Package.resolved</span><br><span class="line">‚îú‚îÄ‚îÄ Package.swift</span><br><span class="line">‚îú‚îÄ‚îÄ README.md</span><br><span class="line">‚îî‚îÄ‚îÄ Sources</span><br><span class="line">    ‚îî‚îÄ‚îÄ MyCommandLineTool</span><br><span class="line">        ‚îî‚îÄ‚îÄ MyCommandLineTool.swift</span><br></pre></td></tr></table></figure><p>In the main source file <code>MyCommandLineTool.swift</code>, the <code>version</code> is defined as a string constant <code>&quot;1.2.3&quot;</code>.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyCommandLineTool</span>: <span class="title class_">ParsableCommand</span> &#123;</span><br><span class="line">    <span class="comment">/// Version Constant</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> version <span class="operator">=</span> <span class="string">&quot;1.2.3&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> configuration <span class="operator">=</span> <span class="type">CommandConfiguration</span>(</span><br><span class="line">        commandName: <span class="string">&quot;MyCommandLineTool&quot;</span>,</span><br><span class="line">        abstract: <span class="string">&quot;This is MyCommandLineTool&quot;</span>,</span><br><span class="line">        version: version <span class="comment">// Make the version available to the CLI</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">run</span>() <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thanks to <a href="https://github.com/apple/swift-argument-parser">Swift Argument Parser</a>, making the version available to the command line is very easy. We can check the version number by passing in the <code>--version</code> flag:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ swift build</span><br><span class="line">Building <span class="keyword">for</span> debugging...</span><br><span class="line">[4/4] Linking MyCommandLineTool</span><br><span class="line">Build complete! (0.66s)</span><br><span class="line"></span><br><span class="line">$ ./.build/debug/MyCommandLineTool --version</span><br><span class="line">1.2.3</span><br></pre></td></tr></table></figure><p>Creating a <code>git</code> tag for each release is also a common practice. In this example, we can tag this release with <code>1.2.3</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag -a 1.2.3</span><br></pre></td></tr></table></figure><p>This works but is not ideal, because there are two places holding the same version that may get out of sync:</p><ul><li>A string constant in the source code</li><li>A <code>git</code> tag of the project repository</li></ul><p>How can we consolidate the version into one place? We know it‚Äôs possible to generate a pretty informative version name using <code>git describe</code> as discussed in the previous post, so why not write an easy script to automate this version generate process?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Auto-generate-GitInfo-swift"><a href="#Auto-generate-GitInfo-swift" class="headerlink" title="Auto-generate GitInfo.swift"></a>Auto-generate <code>GitInfo.swift</code></h3><p>Let‚Äôs create a script <code>Scripts/gen-git-info.sh</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. Define the output Swift file</span></span><br><span class="line">version_file=<span class="string">&quot;Sources/MyCommandLineTool/GitInfo.swift&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Generate &quot;git_version&quot; string</span></span><br><span class="line">git_version=$(git describe --abbrev=4 --dirty --always --tags)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Saving the version string to the output Swift file</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/// Auto-Generated Git Info.</span></span><br><span class="line"><span class="string">/// DO NOT EDIT!</span></span><br><span class="line"><span class="string">enum GitInfo &#123;</span></span><br><span class="line"><span class="string">    static let version = \&quot;<span class="variable">$git_version</span>\&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;</span> &gt; <span class="variable">$version_file</span></span><br></pre></td></tr></table></figure><p>Running this script will generate a new file <code>Sources/MyCommandLineTool/GitInfo.swift</code>:</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Auto-Generated Git Info.</span></span><br><span class="line"><span class="comment">/// DO NOT EDIT!</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">GitInfo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> version <span class="operator">=</span> <span class="string">&quot;1.2.3-dirty&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>‚ÑπÔ∏è <strong>NOTE</strong><br>The <code>version</code> string has a <code>-dirty</code> suffix because we have uncommitted changes.</p></blockquote><p>Finally, we can update the main <code>MyCommandLineTool.swift</code> file to read the new auto-generated version number:</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyCommandLineTool</span>: <span class="title class_">ParsableCommand</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> configuration <span class="operator">=</span> <span class="type">CommandConfiguration</span>(</span><br><span class="line">        commandName: <span class="string">&quot;MyCommandLineTool&quot;</span>,</span><br><span class="line">        abstract: <span class="string">&quot;This is MyCommandLineTool&quot;</span>,</span><br><span class="line">        version: <span class="type">GitInfo</span>.version <span class="comment">// Read auto-generated version</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, let‚Äôs check the result:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ swift build</span><br><span class="line">Building <span class="keyword">for</span> debugging...</span><br><span class="line">[5/5] Linking MyCommandLineTool</span><br><span class="line">Build complete! (0.65s)</span><br><span class="line"></span><br><span class="line">$ ./.build/debug/MyCommandLineTool --version</span><br><span class="line">1.2.3-dirty</span><br></pre></td></tr></table></figure><p>üôå  auto-generated version string is printed out! </p><h3 id="Ignore-the-GitInfo-swift-file"><a href="#Ignore-the-GitInfo-swift-file" class="headerlink" title="Ignore the GitInfo.swift file"></a>Ignore the <code>GitInfo.swift</code> file</h3><p>Because the <code>GitInfo.swift</code> file is auto-generated based on the info from the <code>git</code> repo, committing this file into the repo will affect the versing string generated from <code>git describe</code>. It‚Äôs better to make sure we don‚Äôt commit the file by adding it to <code>.gitignore</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Other ignored files ...</span><br><span class="line"></span><br><span class="line"># Ignore auto-generated git version file</span><br><span class="line">Sources/MyCommandLineTool/GitInfo.swift</span><br></pre></td></tr></table></figure><h3 id="Use-Makefile-to-manage-build-tasks"><a href="#Use-Makefile-to-manage-build-tasks" class="headerlink" title="Use Makefile to manage build tasks"></a>Use <code>Makefile</code> to manage build tasks</h3><p>Everything works so far, but we have to remember to run the <code>gen-git-info.sh</code> script manually every time before building. How can we automate this process? </p><p>Turns out the good old <code>make</code> command can help us. We can create a <code>Makefile</code> for the project and manage the build process:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gen-git-info:</span><br><span class="line">./Scripts/gen-git-info.sh</span><br><span class="line"></span><br><span class="line">build: gen-git-info</span><br><span class="line">swift build</span><br><span class="line"></span><br><span class="line">release: gen-git-info</span><br><span class="line">swift build -c release</span><br><span class="line"></span><br><span class="line">install: release</span><br><span class="line">cp ./.build/release/MyCommandLineTool ~/bin</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">rm -rf .build</span><br></pre></td></tr></table></figure><blockquote><p>‚ö†Ô∏è<br>Makefiles must be indented using TABs and not spaces or make will fail.</p></blockquote><p>Here, we make the <code>gen-git-info</code> script as the dependency of the <code>build</code> and <code>release</code>, so that the script is guaranteed to run before the <code>swift build</code> command.</p><h3 id="Put-everything-together"><a href="#Put-everything-together" class="headerlink" title="Put everything together"></a>Put everything together</h3><p>Now our project looks like this:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‚îú‚îÄ‚îÄ Makefile</span><br><span class="line">‚îú‚îÄ‚îÄ Package.resolved</span><br><span class="line">‚îú‚îÄ‚îÄ Package.swift</span><br><span class="line">‚îú‚îÄ‚îÄ README.md</span><br><span class="line">‚îú‚îÄ‚îÄ Scripts</span><br><span class="line">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ gen-git-info.sh</span><br><span class="line">‚îî‚îÄ‚îÄ Sources</span><br><span class="line">    ‚îî‚îÄ‚îÄ MyCommandLineTool</span><br><span class="line">        ‚îú‚îÄ‚îÄ GitInfo.swift</span><br><span class="line">        ‚îî‚îÄ‚îÄ MyCommandLineTool.swift</span><br></pre></td></tr></table></figure><p>To build a <em>debug</em> build, we can run <code>make build</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make build</span><br><span class="line">./Scripts/gen-git-info.sh</span><br><span class="line">swift build</span><br><span class="line">Building <span class="keyword">for</span> debugging...</span><br><span class="line">[3/3] Emitting module MyCommandLineTool</span><br><span class="line">Build complete! (0.34s)</span><br></pre></td></tr></table></figure><p>To build a <em>release</em> build and install it to the <code>~/bin</code> directory we can run <code>make install</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make install</span><br><span class="line">./Scripts/gen-git-info.sh</span><br><span class="line">swift build -c release</span><br><span class="line">Building <span class="keyword">for</span> production...</span><br><span class="line">[2/2] Compiling MyCommandLineTool GitInfo.swift</span><br><span class="line">Build complete! (0.39s)</span><br><span class="line"><span class="built_in">cp</span> ./.build/release/MyCommandLineTool ~/bin</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://theswiftdev.com/utilizing-makefiles-for-swift-projects/">Utilizing Makefiles for Swift projects</a></li><li><a href="https://makefiletutorial.com/">Makefile Tutorial By Example</a></li><li><a href="https://www.howtogeek.com/446071/how-to-use-the-echo-command-on-linux/">How to Use the Echo Command on Linux</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/2023/03/26/generate-an-informative-version-name-using-git/&quot;&gt;Previously&lt;/a&gt;, we discussed how to use &lt;code&gt;git describe&lt;/code&gt; to generate an informative version name of a project. How do we use it in a Swift Package Manager project to automate the version name generation? &lt;/p&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="shell scripting" scheme="https://haosong.name/tags/shell-scripting/"/>
    
    <category term="git" scheme="https://haosong.name/tags/git/"/>
    
    <category term="swift" scheme="https://haosong.name/tags/swift/"/>
    
    <category term="git describe" scheme="https://haosong.name/tags/git-describe/"/>
    
    <category term="version control" scheme="https://haosong.name/tags/version-control/"/>
    
    <category term="swift package manager" scheme="https://haosong.name/tags/swift-package-manager/"/>
    
    <category term="make" scheme="https://haosong.name/tags/make/"/>
    
    <category term="cli" scheme="https://haosong.name/tags/cli/"/>
    
  </entry>
  
  <entry>
    <title>Generate an informative version name using Git</title>
    <link href="https://haosong.name/2023/03/26/generate-an-informative-version-name-using-git/"/>
    <id>https://haosong.name/2023/03/26/generate-an-informative-version-name-using-git/</id>
    <published>2023-03-26T14:07:43.000Z</published>
    <updated>2023-04-05T15:44:54.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>How do you generate an informative version name like <code>1.0.0-1-gd64d</code> using <code>git</code>?</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git describe --abbrev=4 --dirty --always --tags</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="What-is-git-describe"><a href="#What-is-git-describe" class="headerlink" title="What is git describe?"></a>What is <code>git describe</code>?</h2><p><a href="https://git-scm.com/docs/git-describe">Git - git-describe Documentation</a>: </p><blockquote><p><strong>NAME</strong><br>git-describe - Give an object a human readable name based on an available ref</p><p><strong>DESCRIPTION</strong><br>The command finds the most recent tag that is reachable from a commit. If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the number of additional commits on top of the tagged object and the abbreviated object name of the most recent commit. The result is a ‚Äúhuman-readable‚Äù object name which can also be used to identify the commit to other git commands.</p></blockquote><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git describe --abbrev=4 --dirty --always --tags</span><br></pre></td></tr></table></figure><ul><li><code>--abbrev=4</code>: Use 4 digits or as many digits as needed to form a unique object name.</li><li><code>--dirty</code>: If the working tree has local modification ‚Äú-dirty‚Äù is appended to the result.</li><li><code>--always</code>: Show uniquely abbreviated commit object as fallback.</li><li><code>--tags</code>: Instead of using only the annotated tags, use any tag found in¬†<code>refs/tags</code>¬†namespace.</li></ul><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><pre><code class="highlight mermaid">gitGraph   commit id: &quot;ab27&quot;   commit id: &quot;e9a9&quot; tag: &quot;v1.0.0&quot;</code></pre><p>Running <code>git describe</code> after the latest commit is tagged with <code>1.0.0</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git describe --abbrev=4 --dirty --always --tags</span><br><span class="line">1.0.0 <span class="comment"># returns the latest tag</span></span><br></pre></td></tr></table></figure><pre><code class="highlight mermaid">gitGraph   commit id: &quot;ab27&quot;   commit id: &quot;e9a9&quot; tag: &quot;v1.0.0&quot;   commit id: &quot;d64d&quot;</code></pre><p>Running <code>git describe</code> after commit <code>d64d</code> is made since the <code>1.0.0</code> release:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git describe --abbrev=4 --dirty --always --tags</span><br><span class="line">1.0.0-1-gd64d <span class="comment"># suffixes with additional commits info</span></span><br></pre></td></tr></table></figure><p>Here, the suffix <code>-1-gd64d</code> means we are <code>1</code> commit after version <code>1.0.0</code>, <code>d64d</code> is the prefix of the current commit id, and the <code>g</code> here stands for <code>git</code>. </p><pre><code class="highlight mermaid">gitGraph   commit id: &quot;ab27&quot;   commit id: &quot;e9a9&quot; tag: &quot;v1.0.0&quot;   commit id: &quot;d64d&quot;   commit id: &quot;Uncommitted&quot; type: HIGHLIGHT</code></pre><p>If some uncommitted changes are made after <code>d64d</code>, running <code>git describe</code>: </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git describe --abbrev=4 --dirty --always --tags</span><br><span class="line">1.0.0-1-gd64d-dirty <span class="comment"># suffixed &quot;-dirty&quot; for uncommitted changes</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://git-scm.com/docs/git-describe">Git - git-describe Documentation</a></li><li><a href="https://stackoverflow.com/questions/1704907/how-can-i-get-my-c-code-to-automatically-print-out-its-git-version-hash">How can I get my C code to automatically print out its Git version hash? - Stack Overflow</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;How do you generate an informative version name like &lt;code&gt;1.0.0-1-gd64d&lt;/code&gt; using &lt;code&gt;git&lt;/code&gt;?&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git describe --abbrev=4 --dirty --always --tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="git" scheme="https://haosong.name/tags/git/"/>
    
    <category term="git describe" scheme="https://haosong.name/tags/git-describe/"/>
    
    <category term="version control" scheme="https://haosong.name/tags/version-control/"/>
    
  </entry>
  
  <entry>
    <title>Execute command in a different directory</title>
    <link href="https://haosong.name/2023/03/12/execute-command-in-a-different-directory/"/>
    <id>https://haosong.name/2023/03/12/execute-command-in-a-different-directory/</id>
    <published>2023-03-12T19:07:58.000Z</published>
    <updated>2023-04-05T15:33:25.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>How do you execute a command&#x2F;script in a different directory and stay where you were earlier?</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">cd</span> path/to/some/dir &amp;&amp; ./some-script)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Problem-Dance-of-cd"><a href="#Problem-Dance-of-cd" class="headerlink" title="Problem: Dance of cd"></a>Problem: Dance of <code>cd</code></h2><p>With <a href="https://en.wikipedia.org/wiki/Monorepo">Monorepo</a> setup in many tech companies, we often run into situations where the command&#x2F;script we want to run is not located (or not runnable) in the same directory where the terminal is (most likely the root directory of the repo). </p><p>Let‚Äôs say we have a monorepo project <code>some-awesome-project</code> with both iOS and Android child directories:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‚îú‚îÄ‚îÄ android</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gradle</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gradlew</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lib</span><br><span class="line">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ settings.gradle.kts</span><br><span class="line">‚îú‚îÄ‚îÄ ios</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Package.swift</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ README.md</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Sources</span><br><span class="line">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Tests</span><br><span class="line">‚îî‚îÄ‚îÄ scripts</span><br><span class="line">    ‚îî‚îÄ‚îÄ some-script.sh</span><br></pre></td></tr></table></figure><p>To build the Android project, we have to run <code>./gradlew build</code> in the <code>android</code> directory because that‚Äôs where <code>settings.gradle.kts</code> is located. If we run <code>./android/gradlew build</code> directly at the root directory of the repo, we will end up with an error complaining the root directory does not contain a Gradle build.</p><p>To avoid the build error, we have to do a dance of directory changing like this:</p><ol><li>Change directory: <code>cd android</code> </li><li>Run the command <code>./gradlew build</code> </li><li><code>cd ..</code> back to where we were earlier because many other commands of our day-to-day workflow assume the terminal stays at the root directory of a repo</li></ol><h2 id="Solution-Subshell"><a href="#Solution-Subshell" class="headerlink" title="Solution: Subshell"></a>Solution: Subshell</h2><p>To avoid the <code>cd</code> dance back and forth, we can run the command in a <em>subshell</em> by enclosing the command inside parentheses:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">cd</span> path/to/some/dir &amp;&amp; ./some-script)</span><br></pre></td></tr></table></figure><p>Because the directory change made in a subshell does not carry over to the parent shell, it will stay in the same directory after the command in the subshell finishes.</p><p>Going back to our example, we can simply run <code>(cd android &amp;&amp; ./gradlew build)</code> directly at root directory:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/Developer/some-awesome-project</span><br><span class="line"></span><br><span class="line">$ (cd android &amp;&amp; ./gradlew build)</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 977ms</span><br><span class="line">5 actionable tasks: 5 executed</span><br><span class="line"></span><br><span class="line">$ pwd</span><br><span class="line">/Developer/some-awesome-project</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/13624097/change-directory-and-execute-file-in-one-command">Change directory and execute file in one command - Stack Overflow</a></li><li><a href="https://tldp.org/LDP/abs/html/subshells.html">Advanced Bash-Scripting Guide: Chapter 21. Subshells</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;How do you execute a command&amp;#x2F;script in a different directory and stay where you were earlier?&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; path/to/some/dir &amp;amp;&amp;amp; ./some-script)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="shell scripting" scheme="https://haosong.name/tags/shell-scripting/"/>
    
  </entry>
  
  <entry>
    <title>Viewing debug level logs from iOS simulator</title>
    <link href="https://haosong.name/2021/05/30/viewing-debug-level-logs-from-ios-simulator/"/>
    <id>https://haosong.name/2021/05/30/viewing-debug-level-logs-from-ios-simulator/</id>
    <published>2021-05-30T16:38:09.000Z</published>
    <updated>2023-03-12T19:08:57.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unified-logging-system-aka-os-log"><a href="#Unified-logging-system-aka-os-log" class="headerlink" title="Unified logging system (aka os_log)"></a>Unified logging system (aka <code>os_log</code>)</h2><p>The <a href="https://developer.apple.com/documentation/os/logging">unified logging system</a> (aka <code>os_log</code>) is the recommended way of logging by Apple. It‚Äôs pretty easy to create a logger and log messages at different levels:</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> os.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> button <span class="operator">=</span> <span class="type">Logger</span>(subsystem: <span class="string">&quot;name.haosong.OSLogDemo&quot;</span>, category: <span class="string">&quot;Button&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Debug&quot;</span>, action: &#123;</span><br><span class="line">                <span class="type">Logger</span>.button.log(level: .debug, <span class="string">&quot;debug log&quot;</span>)</span><br><span class="line">            &#125;).padding()</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Info&quot;</span>, action: &#123;</span><br><span class="line">                <span class="type">Logger</span>.button.log(level: .info, <span class="string">&quot;info log&quot;</span>)</span><br><span class="line">            &#125;).padding()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>On macOS, we can view the log messages using the Console app. But the <code>debug</code> level messages from iOS simulators are not visible even after turning on the <code>Include Info Messages</code> and <code>Include Debug Messages</code> in <code>Action</code> menu of the Console app. </p><p>This could be <a href="https://developer.apple.com/forums/thread/82736?answerId=347949022#347949022">a bug of the simulator</a>, because <code>debug</code> level messages from iOS devices are not affected in the Console app. </p><h2 id="Streaming-debug-logs-from-the-simulator-to-Terminal"><a href="#Streaming-debug-logs-from-the-simulator-to-Terminal" class="headerlink" title="Streaming debug logs from the simulator to Terminal"></a>Streaming debug logs from the simulator to Terminal</h2><p>The workaround is to stream the log from the simulator to Terminal:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if the simulator is already booted</span></span><br><span class="line">$ xcrun simctl spawn booted <span class="built_in">log</span> stream --level debug --predicate <span class="string">&#x27;subsystem == &quot;name.haosong.OSLogDemo&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or you can use the device UUID</span></span><br><span class="line">$ xcrun simctl spawn &lt;DEVICE-UUID&gt; <span class="built_in">log</span> stream --level debug --predicate <span class="string">&#x27;subsystem == &quot;name.haosong.OSLogDemo&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://developer.apple.com/forums/thread/82736?answerId=347949022#347949022">Console app not showing info and debug logs | Apple Developer Forums</a></li><li><a href="https://www.iosdev.recipes/simulator/os_log/">Using os_log and log streaming on iOS</a></li><li><a href="https://www.avanderlee.com/workflow/oslog-unified-logging/">OSLog and Unified logging as recommended by Apple - SwiftLee</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Unified-logging-system-aka-os-log&quot;&gt;&lt;a href=&quot;#Unified-logging-system-aka-os-log&quot; class=&quot;headerlink&quot; title=&quot;Unified logging system (aka os_log)&quot;&gt;&lt;/a&gt;Unified logging system (aka &lt;code&gt;os_log&lt;/code&gt;)&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/os/logging&quot;&gt;unified logging system&lt;/a&gt; (aka &lt;code&gt;os_log&lt;/code&gt;) is the recommended way of logging by Apple. It‚Äôs pretty easy to create a logger and log messages at different levels:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SwiftUI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Logger&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; button &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;(subsystem: &lt;span class=&quot;string&quot;&gt;&amp;quot;name.haosong.OSLogDemo&amp;quot;&lt;/span&gt;, category: &lt;span class=&quot;string&quot;&gt;&amp;quot;Button&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ContentView&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body: &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;VStack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Button&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Debug&amp;quot;&lt;/span&gt;, action: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;.button.log(level: .debug, &lt;span class=&quot;string&quot;&gt;&amp;quot;debug log&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).padding()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Button&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Info&amp;quot;&lt;/span&gt;, action: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;.button.log(level: .info, &lt;span class=&quot;string&quot;&gt;&amp;quot;info log&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).padding()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="ios" scheme="https://haosong.name/tags/ios/"/>
    
    <category term="debug" scheme="https://haosong.name/tags/debug/"/>
    
    <category term="os_log" scheme="https://haosong.name/tags/os-log/"/>
    
  </entry>
  
  <entry>
    <title>How to call C variadic functions from Swift?</title>
    <link href="https://haosong.name/2021/05/29/how-to-call-c-variadic-functions-from-swift/"/>
    <id>https://haosong.name/2021/05/29/how-to-call-c-variadic-functions-from-swift/</id>
    <published>2021-05-29T19:36:44.000Z</published>
    <updated>2023-03-12T19:08:57.940Z</updated>
    
    <content type="html"><![CDATA[<p>In this article we‚Äôre going to create a Swift wrapper function for a C function that use the <code>...</code> syntax for variadic arguments:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_sum</span><span class="params">(<span class="type">int</span> n, ...)</span>;</span><br></pre></td></tr></table></figure><p><code>...</code> variadic arguments syntax is not supported by default in Swift, you will get compiler errors like this:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;my_sum&#x27; is unavailable: Variadic function is unavailable</span><br></pre></td></tr></table></figure><p>There‚Äôs a way to workaround this limitation, if you can modify the C function to take <code>va_list</code> as parameter.</p><span id="more"></span><h2 id="Create-a-new-C-function-with-va-list"><a href="#Create-a-new-C-function-with-va-list" class="headerlink" title="Create a new C function with va_list"></a>Create a new C function with <code>va_list</code></h2><p>The original function looks like this:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_sum</span><span class="params">(<span class="type">int</span> n, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result += va_arg(args, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To avoid duplicating the logic, we can create a new version take a <code>va_list</code> as parameter, and call the new version from the original function:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New version </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_vsum</span><span class="params">(<span class="type">int</span> n, va_list arguments)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result += va_arg(arguments, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_sum</span><span class="params">(<span class="type">int</span> n, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = my_vsum(n, args);</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Create-a-Swift-wrapper-with-CVarArg"><a href="#Create-a-Swift-wrapper-with-CVarArg" class="headerlink" title="Create a Swift wrapper with CVarArg"></a>Create a Swift wrapper with <code>CVarArg</code></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">mySwiftSum</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int32</span>, <span class="keyword">_</span> <span class="params">arguments</span>: <span class="type">CVarArg</span>...) -&gt; <span class="type">Int32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">withVaList</span>(arguments) &#123; my_vsum(n, <span class="variable">$0</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can use this function in Swift:</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum <span class="operator">=</span> mySwiftSum(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum = <span class="subst">\(sum)</span>&quot;</span>) </span><br><span class="line"><span class="comment">// Prints &quot;sum = 15&quot;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://developer.apple.com/documentation/swift/cvararg">CVarArg | Apple Developer Documentation</a></li><li><a href="https://stackoverflow.com/questions/24195796/how-do-you-call-an-objective-c-variadic-method-from-swift">How do you call an Objective-C variadic method from Swift?</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;In this article we‚Äôre going to create a Swift wrapper function for a C function that use the &lt;code&gt;...&lt;/code&gt; syntax for variadic arguments:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;my_sum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n, ...)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt; variadic arguments syntax is not supported by default in Swift, you will get compiler errors like this:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x27;my_sum&amp;#x27; is unavailable: Variadic function is unavailable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There‚Äôs a way to workaround this limitation, if you can modify the C function to take &lt;code&gt;va_list&lt;/code&gt; as parameter.&lt;/p&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="swift" scheme="https://haosong.name/tags/swift/"/>
    
    <category term="c" scheme="https://haosong.name/tags/c/"/>
    
    <category term="variadic function" scheme="https://haosong.name/tags/variadic-function/"/>
    
    <category term="va_list" scheme="https://haosong.name/tags/va-list/"/>
    
  </entry>
  
  <entry>
    <title>Signing Git commits using GPG</title>
    <link href="https://haosong.name/2021/05/25/signing-git-commits-using-gpg/"/>
    <id>https://haosong.name/2021/05/25/signing-git-commits-using-gpg/</id>
    <published>2021-05-25T21:59:02.000Z</published>
    <updated>2023-03-12T23:53:37.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To sign git commits on macOS, we need to install <code>gpg</code> and <code>pinentry-mac</code> (for storing passphrase in keychain).</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install gpg pinentry-mac</span><br></pre></td></tr></table></figure><h2 id="Setup-GPG"><a href="#Setup-GPG" class="headerlink" title="Setup GPG"></a>Setup GPG</h2><p>Run the following command to set <code>pinentry-mac</code> as <code>pinentry-program</code> in <code>~/.gnupg/gpg-agent.conf</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;pinentry-program <span class="subst">$(brew --prefix)</span>/bin/pinentry-mac&quot;</span> &gt;&gt; ~/.gnupg/gpg-agent.conf</span><br></pre></td></tr></table></figure><p>Add the following line to <code>~/.gnupg/gpg.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use-agent</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Generate-a-GPG-key"><a href="#Generate-a-GPG-key" class="headerlink" title="Generate a GPG key"></a>Generate a GPG key</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br></pre></td></tr></table></figure><p>Follow the instruction here: <a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key">Generating a new GPG key</a></p><h2 id="Confirm-GPG-is-working"><a href="#Confirm-GPG-is-working" class="headerlink" title="Confirm GPG is working"></a>Confirm GPG is working</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> | gpg --clearsign</span><br></pre></td></tr></table></figure><p>We can restart gpg agent if needed:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpgconf --<span class="built_in">kill</span> gpg-agent</span><br><span class="line">$ gpgconf --launch gpg-agent</span><br></pre></td></tr></table></figure><h2 id="Set-GPG-signing-key-in-Git"><a href="#Set-GPG-signing-key-in-Git" class="headerlink" title="Set GPG signing key in Git"></a>Set GPG signing key in Git</h2><p>List all the keys:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure><p>In the output find out the Key ID with the following format (assuming we picked <code>RSA</code> and <code>4096</code> bits key size when generating GPG key): </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">sec   rsa4096/&#123;KEY-ID&#125; </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Tell git which key to use:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.signingkey &#123;KEY-ID&#125;</span><br></pre></td></tr></table></figure><p>To sign all commits automatically:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global commit.gpgsign <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>To sign all tags automatically:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global tag.forceSignAnnotated <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Add-GPG-key-to-GitHub"><a href="#Add-GPG-key-to-GitHub" class="headerlink" title="Add GPG key to GitHub"></a>Add GPG key to GitHub</h2><p>Print the GPG key: </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --armor --<span class="built_in">export</span> &#123;KEY-ID&#125;</span><br></pre></td></tr></table></figure><p>Copy the GPG key, beginning with <code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code> and ending with <code>-----END PGP PUBLIC KEY BLOCK-----</code>, and <a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account">add it to GitHub SSH and GPG keys Settings</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://merikan.com/2019/05/how-to-sign-git-commits/">How to Sign Git Commits</a></li><li><a href="https://withblue.ink/2020/05/17/how-and-why-to-sign-git-commits.html">How (and why) to sign Git commits</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/telling-git-about-your-signing-key">Telling Git about your signing key</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key">Generating a new GPG key</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account">Adding a new GPG key to your GitHub account</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;To sign git commits on macOS, we need to install &lt;code&gt;gpg&lt;/code&gt; and &lt;code&gt;pinentry-mac&lt;/code&gt; (for storing passphrase in keychain).&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install gpg pinentry-mac&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Setup-GPG&quot;&gt;&lt;a href=&quot;#Setup-GPG&quot; class=&quot;headerlink&quot; title=&quot;Setup GPG&quot;&gt;&lt;/a&gt;Setup GPG&lt;/h2&gt;&lt;p&gt;Run the following command to set &lt;code&gt;pinentry-mac&lt;/code&gt; as &lt;code&gt;pinentry-program&lt;/code&gt; in &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;pinentry-program &lt;span class=&quot;subst&quot;&gt;$(brew --prefix)&lt;/span&gt;/bin/pinentry-mac&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.gnupg/gpg-agent.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Add the following line to &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;use-agent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="git" scheme="https://haosong.name/tags/git/"/>
    
    <category term="gpg" scheme="https://haosong.name/tags/gpg/"/>
    
    <category term="mac" scheme="https://haosong.name/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>first commit</title>
    <link href="https://haosong.name/2016/02/16/first-commit/"/>
    <id>https://haosong.name/2016/02/16/first-commit/</id>
    <published>2016-02-17T07:03:09.000Z</published>
    <updated>2023-04-09T23:17:38.482Z</updated>
    
    <content type="html"><![CDATA[<p>Finally got my blog up with <a href="https://hexo.io/">Hexo</a> and <a href="https://pages.github.com/">GitHub pages</a>. :D </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Finally got my blog up with &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt;. :D &lt;/p&gt;
</summary>
      
    
    
    
    <category term="main" scheme="https://haosong.name/categories/main/"/>
    
    
    <category term="hexo" scheme="https://haosong.name/tags/hexo/"/>
    
  </entry>
  
</feed>
