<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NSHaoSong</title>
  
  
  <link href="https://haosong.name/atom.xml" rel="self"/>
  
  <link href="https://haosong.name/"/>
  <updated>2023-03-12T22:24:56.771Z</updated>
  <id>https://haosong.name/</id>
  
  <author>
    <name>NSHaoSong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Change directory and execute command</title>
    <link href="https://haosong.name/2023/03/12/change-directory-and-execute-command/"/>
    <id>https://haosong.name/2023/03/12/change-directory-and-execute-command/</id>
    <published>2023-03-12T19:07:58.000Z</published>
    <updated>2023-03-12T22:24:56.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>How to change directory, execute a command and get back to where you were earlier?</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">cd</span> path/to/some/dir &amp;&amp; ./some-command)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Problem-Dance-of-cd"><a href="#Problem-Dance-of-cd" class="headerlink" title="Problem: Dance of cd"></a>Problem: Dance of <code>cd</code></h2><p>With <a href="https://en.wikipedia.org/wiki/Monorepo">Monorepo</a> setup in many tech companies, we often run into situations that the command we want to run is not located (or not runnable) in the same directory where terminal is at (most likely the root directory of the repo). </p><p>To run the command we have to do a dance of directory changing like this:</p><ol><li>Change directory: <code>cd path/to/some/dir</code> </li><li>Run the command <code>./some-command</code> </li><li><code>cd</code> back to where we were earlier, because many commands of the day-to-day workflow assumes the terminal stays at root directory of a repo</li></ol><h2 id="Solution-Subshell"><a href="#Solution-Subshell" class="headerlink" title="Solution: Subshell"></a>Solution: Subshell</h2><p>To avoid the <code>cd</code> dance back and forth, we can run the command in a <em>subshell</em> by enclosing the command inside parentheses:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">cd</span> path/to/some/dir &amp;&amp; ./some-command)</span><br></pre></td></tr></table></figure><p>Because directory changes made in a subshell do not carry over to the parent shell, it will stay at the same directory after the command in subshell finishes.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>In a monorepo project with both iOS and Android child directories:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── android</span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── gradle</span><br><span class="line">│   ├── gradlew</span><br><span class="line">│   ├── lib</span><br><span class="line">│   └── settings.gradle.kts</span><br><span class="line">├── ios</span><br><span class="line">│   ├── Package.swift</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── Sources</span><br><span class="line">│   └── Tests</span><br><span class="line">└── scripts</span><br><span class="line">    └── some-script.sh</span><br></pre></td></tr></table></figure><p>We can run <code>./gradlew build</code> command at root directory and the terminal will stay at the same directory after running the command:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Developer/some-awesome-project</span><br><span class="line"></span><br><span class="line">$ (<span class="built_in">cd</span> android &amp;&amp; ./gradlew build)</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 977ms</span><br><span class="line">5 actionable tasks: 5 executed</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Developer/some-awesome-project</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/13624097/change-directory-and-execute-file-in-one-command">Change directory and execute file in one command - Stack Overflow</a></li><li><a href="https://tldp.org/LDP/abs/html/subshells.html">Advanced Bash-Scripting Guide: Chapter 21. Subshells</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;How to change directory, execute a command and get back to where you were earlier?&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; path/to/some/dir &amp;amp;&amp;amp; ./some-command)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="shell scripting" scheme="https://haosong.name/tags/shell-scripting/"/>
    
  </entry>
  
  <entry>
    <title>Viewing debug level logs from iOS simulator</title>
    <link href="https://haosong.name/2021/05/30/viewing-debug-level-logs-from-ios-simulator/"/>
    <id>https://haosong.name/2021/05/30/viewing-debug-level-logs-from-ios-simulator/</id>
    <published>2021-05-30T16:38:09.000Z</published>
    <updated>2023-03-12T19:08:57.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unified-logging-system-aka-os-log"><a href="#Unified-logging-system-aka-os-log" class="headerlink" title="Unified logging system (aka os_log)"></a>Unified logging system (aka <code>os_log</code>)</h2><p>The <a href="https://developer.apple.com/documentation/os/logging">unified logging system</a> (aka <code>os_log</code>) is the recommended way of logging by Apple. It’s pretty easy to create a logger and log messages at different levels:</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> os.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> button <span class="operator">=</span> <span class="type">Logger</span>(subsystem: <span class="string">&quot;name.haosong.OSLogDemo&quot;</span>, category: <span class="string">&quot;Button&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Debug&quot;</span>, action: &#123;</span><br><span class="line">                <span class="type">Logger</span>.button.log(level: .debug, <span class="string">&quot;debug log&quot;</span>)</span><br><span class="line">            &#125;).padding()</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Info&quot;</span>, action: &#123;</span><br><span class="line">                <span class="type">Logger</span>.button.log(level: .info, <span class="string">&quot;info log&quot;</span>)</span><br><span class="line">            &#125;).padding()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>On macOS, we can view the log messages using the Console app. But the <code>debug</code> level messages from iOS simulators are not visible even after turning on the <code>Include Info Messages</code> and <code>Include Debug Messages</code> in <code>Action</code> menu of the Console app. </p><p>This could be <a href="https://developer.apple.com/forums/thread/82736?answerId=347949022#347949022">a bug of the simulator</a>, because <code>debug</code> level messages from iOS devices are not affected in the Console app. </p><h2 id="Streaming-debug-logs-from-the-simulator-to-Terminal"><a href="#Streaming-debug-logs-from-the-simulator-to-Terminal" class="headerlink" title="Streaming debug logs from the simulator to Terminal"></a>Streaming debug logs from the simulator to Terminal</h2><p>The workaround is to stream the log from the simulator to Terminal:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if the simulator is already booted</span></span><br><span class="line">$ xcrun simctl spawn booted <span class="built_in">log</span> stream --level debug --predicate <span class="string">&#x27;subsystem == &quot;name.haosong.OSLogDemo&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or you can use the device UUID</span></span><br><span class="line">$ xcrun simctl spawn &lt;DEVICE-UUID&gt; <span class="built_in">log</span> stream --level debug --predicate <span class="string">&#x27;subsystem == &quot;name.haosong.OSLogDemo&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://developer.apple.com/forums/thread/82736?answerId=347949022#347949022">Console app not showing info and debug logs | Apple Developer Forums</a></li><li><a href="https://www.iosdev.recipes/simulator/os_log/">Using os_log and log streaming on iOS</a></li><li><a href="https://www.avanderlee.com/workflow/oslog-unified-logging/">OSLog and Unified logging as recommended by Apple - SwiftLee</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Unified-logging-system-aka-os-log&quot;&gt;&lt;a href=&quot;#Unified-logging-system-aka-os-log&quot; class=&quot;headerlink&quot; title=&quot;Unified logging system (aka os_log)&quot;&gt;&lt;/a&gt;Unified logging system (aka &lt;code&gt;os_log&lt;/code&gt;)&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/os/logging&quot;&gt;unified logging system&lt;/a&gt; (aka &lt;code&gt;os_log&lt;/code&gt;) is the recommended way of logging by Apple. It’s pretty easy to create a logger and log messages at different levels:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SwiftUI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Logger&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; button &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;(subsystem: &lt;span class=&quot;string&quot;&gt;&amp;quot;name.haosong.OSLogDemo&amp;quot;&lt;/span&gt;, category: &lt;span class=&quot;string&quot;&gt;&amp;quot;Button&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ContentView&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body: &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;VStack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Button&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Debug&amp;quot;&lt;/span&gt;, action: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;.button.log(level: .debug, &lt;span class=&quot;string&quot;&gt;&amp;quot;debug log&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).padding()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Button&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Info&amp;quot;&lt;/span&gt;, action: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;.button.log(level: .info, &lt;span class=&quot;string&quot;&gt;&amp;quot;info log&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).padding()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="ios" scheme="https://haosong.name/tags/ios/"/>
    
    <category term="debug" scheme="https://haosong.name/tags/debug/"/>
    
    <category term="os_log" scheme="https://haosong.name/tags/os-log/"/>
    
  </entry>
  
  <entry>
    <title>How to call C variadic functions from Swift?</title>
    <link href="https://haosong.name/2021/05/29/how-to-call-c-variadic-functions-from-swift/"/>
    <id>https://haosong.name/2021/05/29/how-to-call-c-variadic-functions-from-swift/</id>
    <published>2021-05-29T19:36:44.000Z</published>
    <updated>2023-03-12T19:08:57.940Z</updated>
    
    <content type="html"><![CDATA[<p>In this article we’re going to create a Swift wrapper function for a C function that use the <code>...</code> syntax for variadic arguments:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_sum</span><span class="params">(<span class="type">int</span> n, ...)</span>;</span><br></pre></td></tr></table></figure><p><code>...</code> variadic arguments syntax is not supported by default in Swift, you will get compiler errors like this:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;my_sum&#x27; is unavailable: Variadic function is unavailable</span><br></pre></td></tr></table></figure><p>There’s a way to workaround this limitation, if you can modify the C function to take <code>va_list</code> as parameter.</p><span id="more"></span><h2 id="Create-a-new-C-function-with-va-list"><a href="#Create-a-new-C-function-with-va-list" class="headerlink" title="Create a new C function with va_list"></a>Create a new C function with <code>va_list</code></h2><p>The original function looks like this:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_sum</span><span class="params">(<span class="type">int</span> n, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result += va_arg(args, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To avoid duplicating the logic, we can create a new version take a <code>va_list</code> as parameter, and call the new version from the original function:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New version </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_vsum</span><span class="params">(<span class="type">int</span> n, va_list arguments)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result += va_arg(arguments, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_sum</span><span class="params">(<span class="type">int</span> n, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = my_vsum(n, args);</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Create-a-Swift-wrapper-with-CVarArg"><a href="#Create-a-Swift-wrapper-with-CVarArg" class="headerlink" title="Create a Swift wrapper with CVarArg"></a>Create a Swift wrapper with <code>CVarArg</code></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">mySwiftSum</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int32</span>, <span class="keyword">_</span> <span class="params">arguments</span>: <span class="type">CVarArg</span>...) -&gt; <span class="type">Int32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">withVaList</span>(arguments) &#123; my_vsum(n, <span class="variable">$0</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can use this function in Swift:</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum <span class="operator">=</span> mySwiftSum(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum = <span class="subst">\(sum)</span>&quot;</span>) </span><br><span class="line"><span class="comment">// Prints &quot;sum = 15&quot;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://developer.apple.com/documentation/swift/cvararg">CVarArg | Apple Developer Documentation</a></li><li><a href="https://stackoverflow.com/questions/24195796/how-do-you-call-an-objective-c-variadic-method-from-swift">How do you call an Objective-C variadic method from Swift?</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;In this article we’re going to create a Swift wrapper function for a C function that use the &lt;code&gt;...&lt;/code&gt; syntax for variadic arguments:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;my_sum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n, ...)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt; variadic arguments syntax is not supported by default in Swift, you will get compiler errors like this:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x27;my_sum&amp;#x27; is unavailable: Variadic function is unavailable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There’s a way to workaround this limitation, if you can modify the C function to take &lt;code&gt;va_list&lt;/code&gt; as parameter.&lt;/p&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="swift" scheme="https://haosong.name/tags/swift/"/>
    
    <category term="c" scheme="https://haosong.name/tags/c/"/>
    
    <category term="variadic function" scheme="https://haosong.name/tags/variadic-function/"/>
    
    <category term="va_list" scheme="https://haosong.name/tags/va-list/"/>
    
  </entry>
  
  <entry>
    <title>Signing Git Commits Using GPG</title>
    <link href="https://haosong.name/2021/05/25/signing-git-commits-using-gpg/"/>
    <id>https://haosong.name/2021/05/25/signing-git-commits-using-gpg/</id>
    <published>2021-05-25T21:59:02.000Z</published>
    <updated>2023-03-12T19:08:57.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To sign git commits on macOS, we need to install <code>gpg</code> and <code>pinentry-mac</code> (for storing passphrase in keychain).</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install gpg pinentry-mac</span><br></pre></td></tr></table></figure><h2 id="Setup-GPG"><a href="#Setup-GPG" class="headerlink" title="Setup GPG"></a>Setup GPG</h2><p>Run the following command to set <code>pinentry-mac</code> as <code>pinentry-program</code> in <code>~/.gnupg/gpg-agent.conf</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;pinentry-program <span class="subst">$(brew --prefix)</span>/bin/pinentry-mac&quot;</span> &gt;&gt; ~/.gnupg/gpg-agent.conf</span><br></pre></td></tr></table></figure><p>Add the following line to <code>~/.gnupg/gpg.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use-agent</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Generate-a-GPG-key"><a href="#Generate-a-GPG-key" class="headerlink" title="Generate a GPG key"></a>Generate a GPG key</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br></pre></td></tr></table></figure><p>Follow the instruction here: <a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key">Generating a new GPG key</a></p><h2 id="Confirm-GPG-is-working"><a href="#Confirm-GPG-is-working" class="headerlink" title="Confirm GPG is working"></a>Confirm GPG is working</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> | gpg --clearsign</span><br></pre></td></tr></table></figure><p>We can restart gpg agent if needed:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpgconf --<span class="built_in">kill</span> gpg-agent</span><br><span class="line">$ gpgconf --launch gpg-agent</span><br></pre></td></tr></table></figure><h2 id="Set-GPG-signing-key-in-Git"><a href="#Set-GPG-signing-key-in-Git" class="headerlink" title="Set GPG signing key in Git"></a>Set GPG signing key in Git</h2><p>List all the keys:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure><p>In the output find out the Key ID with the following format (assuming we picked <code>RSA</code> and <code>4096</code> bits key size when generating GPG key): </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">sec   rsa4096/&#123;KEY-ID&#125; </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Tell git which key to use:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.signingkey &#123;KEY-ID&#125;</span><br></pre></td></tr></table></figure><p>To sign all commits automatically:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global commit.gpgsign <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>To sign all tags automatically:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global tag.forceSignAnnotated <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Add-GPG-key-to-GitHub"><a href="#Add-GPG-key-to-GitHub" class="headerlink" title="Add GPG key to GitHub"></a>Add GPG key to GitHub</h2><p>Print the GPG key: </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --armor --<span class="built_in">export</span> &#123;KEY-ID&#125;</span><br></pre></td></tr></table></figure><p>Copy the GPG key, beginning with <code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code> and ending with <code>-----END PGP PUBLIC KEY BLOCK-----</code>, and <a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account">add it to GitHub SSH and GPG keys Settings</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://merikan.com/2019/05/how-to-sign-git-commits/">How to Sign Git Commits</a></li><li><a href="https://withblue.ink/2020/05/17/how-and-why-to-sign-git-commits.html">How (and why) to sign Git commits</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/telling-git-about-your-signing-key">Telling Git about your signing key</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key">Generating a new GPG key</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account">Adding a new GPG key to your GitHub account</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;To sign git commits on macOS, we need to install &lt;code&gt;gpg&lt;/code&gt; and &lt;code&gt;pinentry-mac&lt;/code&gt; (for storing passphrase in keychain).&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install gpg pinentry-mac&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Setup-GPG&quot;&gt;&lt;a href=&quot;#Setup-GPG&quot; class=&quot;headerlink&quot; title=&quot;Setup GPG&quot;&gt;&lt;/a&gt;Setup GPG&lt;/h2&gt;&lt;p&gt;Run the following command to set &lt;code&gt;pinentry-mac&lt;/code&gt; as &lt;code&gt;pinentry-program&lt;/code&gt; in &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;pinentry-program &lt;span class=&quot;subst&quot;&gt;$(brew --prefix)&lt;/span&gt;/bin/pinentry-mac&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.gnupg/gpg-agent.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Add the following line to &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;use-agent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="programming" scheme="https://haosong.name/categories/programming/"/>
    
    
    <category term="git" scheme="https://haosong.name/tags/git/"/>
    
    <category term="gpg" scheme="https://haosong.name/tags/gpg/"/>
    
    <category term="mac" scheme="https://haosong.name/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>first commit</title>
    <link href="https://haosong.name/2016/02/16/first-commit/"/>
    <id>https://haosong.name/2016/02/16/first-commit/</id>
    <published>2016-02-17T07:03:09.000Z</published>
    <updated>2023-02-26T16:08:38.231Z</updated>
    
    <content type="html"><![CDATA[<p>Finally got my blog up with <a href="https://hexo.io/">Hexo</a> and <a href="https://pages.github.com/">GitHub pages</a>. :D </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Finally got my blog up with &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt;. :D &lt;/p&gt;
</summary>
      
    
    
    
    <category term="main" scheme="https://haosong.name/categories/main/"/>
    
    
    <category term="Hexo" scheme="https://haosong.name/tags/hexo/"/>
    
  </entry>
  
</feed>
